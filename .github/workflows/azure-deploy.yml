#file: noinspection UndefinedParamsPresent
name: Build and deploy to Azure App Service

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_USE_OIDC: true
  TF_VAR_existing_resource_group_name: ${{ secrets.EXISTING_RESOURCE_GROUP_NAME }}
  TF_VAR_existing_service_plan_name: ${{ secrets.EXISTING_SERVICE_PLAN_NAME }}
  TF_VAR_flask_secret_key: ${{ secrets.FLASK_SECRET_KEY }}
  TF_WORKING_DIR: ./terraform

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    outputs:
      app_service_name: ${{ steps.get_outputs.outputs.app_service_name }}
      python_version: ${{steps.get_outputs.outputs.python_version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}"

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: get_outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          APP_NAME=$(terraform output -raw app_service_name)
          PYTHON_VERSION=$(terraform output -raw python_version)
          echo "app_service_name=$APP_NAME" >> "$GITHUB_OUTPUT"
          echo "python_version=$PYTHON_VERSION" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    name: Build
    needs: terraform
    env:
      PYTHON_VERSION: ${{ needs.terraform.outputs.python_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --only=main

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r $(poetry env info --path)/lib/python${{ env.PYTHON_VERSION }}/site-packages/* deploy/
          find . -maxdepth 1 -type f -name "*.py" -exec cp {} deploy/ \;
          cp -r tomboonedotcom deploy/
          cp -r templates deploy/
          cp -r static deploy/
          cp -r alembic deploy/
          cp alembic.ini deploy/ 2>/dev/null || true
          mkdir -p deploy/instance

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: deploy/

  deploy:
    runs-on: ubuntu-latest
    needs: [terraform, build]
    environment: production
    env:
      APP_SERVICE_NAME: ${{ needs.terraform.outputs.app_service_name }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: python-app
          path: .

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_SERVICE_NAME }}
